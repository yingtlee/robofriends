{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","container/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","pending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","err","dispatch","event","payload","target","value","fetch","then","response","json","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initialStateSearch","initialStateRequest","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.672b14b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    \r\n    return (\r\n        <div>            \r\n            {\r\n                robots.map((user, i) =>{\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}/>\r\n                    ); \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange}) =>{\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robot'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>OOOOOOOPS! That's no good.</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../component/Scroll';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        searchField: state.searchRobots.searchField, \r\n        robots: state.requestRobots.robots,\r\n        pending: state.requestRobots.pending,\r\n        err: state.requestRobots.err\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }    \r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, pending} = this.props;\r\n        const filterRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n\r\n        return (\r\n            <div className='tc'>\r\n              <h1 className='f1'>RoboFriends</h1>\r\n              <SearchBox searchChange={onSearchChange}/>\r\n              <Scroll>\r\n                { pending ? <h1>Loading</h1> :\r\n                  <ErrorBoundry>\r\n                    <CardList robots={filterRobots} />\r\n                  </ErrorBoundry>\r\n                }\r\n              </Scroll>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )(App);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .then(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRequest = {\r\n    robots:[],\r\n    pending: false,\r\n    err: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRequest, action ={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {pending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {pending: false, robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {err: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\nReactDOM.render( <Provider store={store}>\n                    <App/>\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}